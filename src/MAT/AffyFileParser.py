# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _AffyFileParser
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _AffyFileParser.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _AffyFileParser.PySwigIterator_value(*args)
    def incr(*args): return _AffyFileParser.PySwigIterator_incr(*args)
    def decr(*args): return _AffyFileParser.PySwigIterator_decr(*args)
    def distance(*args): return _AffyFileParser.PySwigIterator_distance(*args)
    def equal(*args): return _AffyFileParser.PySwigIterator_equal(*args)
    def copy(*args): return _AffyFileParser.PySwigIterator_copy(*args)
    def next(*args): return _AffyFileParser.PySwigIterator_next(*args)
    def previous(*args): return _AffyFileParser.PySwigIterator_previous(*args)
    def advance(*args): return _AffyFileParser.PySwigIterator_advance(*args)
    def __eq__(*args): return _AffyFileParser.PySwigIterator___eq__(*args)
    def __ne__(*args): return _AffyFileParser.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _AffyFileParser.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _AffyFileParser.PySwigIterator___isub__(*args)
    def __add__(*args): return _AffyFileParser.PySwigIterator___add__(*args)
    def __sub__(*args): return _AffyFileParser.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _AffyFileParser.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

_AFFY_BASE_TYPE_H = _AffyFileParser._AFFY_BASE_TYPE_H
class IntervalEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq"] = _AffyFileParser.IntervalEntry_seq_set
    __swig_getmethods__["seq"] = _AffyFileParser.IntervalEntry_seq_get
    if _newclass:seq = _swig_property(_AffyFileParser.IntervalEntry_seq_get, _AffyFileParser.IntervalEntry_seq_set)
    __swig_setmethods__["probeSetName"] = _AffyFileParser.IntervalEntry_probeSetName_set
    __swig_getmethods__["probeSetName"] = _AffyFileParser.IntervalEntry_probeSetName_get
    if _newclass:probeSetName = _swig_property(_AffyFileParser.IntervalEntry_probeSetName_get, _AffyFileParser.IntervalEntry_probeSetName_set)
    __swig_setmethods__["start"] = _AffyFileParser.IntervalEntry_start_set
    __swig_getmethods__["start"] = _AffyFileParser.IntervalEntry_start_get
    if _newclass:start = _swig_property(_AffyFileParser.IntervalEntry_start_get, _AffyFileParser.IntervalEntry_start_set)
    __swig_setmethods__["stop"] = _AffyFileParser.IntervalEntry_stop_set
    __swig_getmethods__["stop"] = _AffyFileParser.IntervalEntry_stop_get
    if _newclass:stop = _swig_property(_AffyFileParser.IntervalEntry_stop_get, _AffyFileParser.IntervalEntry_stop_set)
    __swig_setmethods__["overlap"] = _AffyFileParser.IntervalEntry_overlap_set
    __swig_getmethods__["overlap"] = _AffyFileParser.IntervalEntry_overlap_get
    if _newclass:overlap = _swig_property(_AffyFileParser.IntervalEntry_overlap_get, _AffyFileParser.IntervalEntry_overlap_set)
    __swig_setmethods__["strand"] = _AffyFileParser.IntervalEntry_strand_set
    __swig_getmethods__["strand"] = _AffyFileParser.IntervalEntry_strand_get
    if _newclass:strand = _swig_property(_AffyFileParser.IntervalEntry_strand_get, _AffyFileParser.IntervalEntry_strand_set)
    def size(*args): return _AffyFileParser.IntervalEntry_size(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_IntervalEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_IntervalEntry
    __del__ = lambda self : None;
IntervalEntry_swigregister = _AffyFileParser.IntervalEntry_swigregister
IntervalEntry_swigregister(IntervalEntry)

class TagValuePairType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagValuePairType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagValuePairType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tag"] = _AffyFileParser.TagValuePairType_Tag_set
    __swig_getmethods__["Tag"] = _AffyFileParser.TagValuePairType_Tag_get
    if _newclass:Tag = _swig_property(_AffyFileParser.TagValuePairType_Tag_get, _AffyFileParser.TagValuePairType_Tag_set)
    __swig_setmethods__["Value"] = _AffyFileParser.TagValuePairType_Value_set
    __swig_getmethods__["Value"] = _AffyFileParser.TagValuePairType_Value_get
    if _newclass:Value = _swig_property(_AffyFileParser.TagValuePairType_Value_get, _AffyFileParser.TagValuePairType_Value_set)
    def __eq__(*args): return _AffyFileParser.TagValuePairType___eq__(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_TagValuePairType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_TagValuePairType
    __del__ = lambda self : None;
TagValuePairType_swigregister = _AffyFileParser.TagValuePairType_swigregister
TagValuePairType_swigregister(TagValuePairType)

MAX_PROBE_SET_NAME_LENGTH = _AffyFileParser.MAX_PROBE_SET_NAME_LENGTH
class CCDFFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFFileHeader, name)
    __repr__ = _swig_repr
    def GetCols(*args): return _AffyFileParser.CCDFFileHeader_GetCols(*args)
    def GetRows(*args): return _AffyFileParser.CCDFFileHeader_GetRows(*args)
    def GetNumProbeSets(*args): return _AffyFileParser.CCDFFileHeader_GetNumProbeSets(*args)
    def GetNumQCProbeSets(*args): return _AffyFileParser.CCDFFileHeader_GetNumQCProbeSets(*args)
    def GetReference(*args): return _AffyFileParser.CCDFFileHeader_GetReference(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFFileHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFFileHeader
    __del__ = lambda self : None;
CCDFFileHeader_swigregister = _AffyFileParser.CCDFFileHeader_swigregister
CCDFFileHeader_swigregister(CCDFFileHeader)

UnknownProbeSetType = _AffyFileParser.UnknownProbeSetType
ExpressionProbeSetType = _AffyFileParser.ExpressionProbeSetType
GenotypingProbeSetType = _AffyFileParser.GenotypingProbeSetType
ResequencingProbeSetType = _AffyFileParser.ResequencingProbeSetType
TagProbeSetType = _AffyFileParser.TagProbeSetType
NoDirection = _AffyFileParser.NoDirection
SenseDirection = _AffyFileParser.SenseDirection
AntiSenseDirection = _AffyFileParser.AntiSenseDirection
class CCDFProbeInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeInformation, name)
    __repr__ = _swig_repr
    def GetListIndex(*args): return _AffyFileParser.CCDFProbeInformation_GetListIndex(*args)
    def GetExpos(*args): return _AffyFileParser.CCDFProbeInformation_GetExpos(*args)
    def GetX(*args): return _AffyFileParser.CCDFProbeInformation_GetX(*args)
    def GetY(*args): return _AffyFileParser.CCDFProbeInformation_GetY(*args)
    def GetPBase(*args): return _AffyFileParser.CCDFProbeInformation_GetPBase(*args)
    def GetTBase(*args): return _AffyFileParser.CCDFProbeInformation_GetTBase(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFProbeInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeInformation
    __del__ = lambda self : None;
CCDFProbeInformation_swigregister = _AffyFileParser.CCDFProbeInformation_swigregister
CCDFProbeInformation_swigregister(CCDFProbeInformation)

PROBE_SIZE = _AffyFileParser.PROBE_SIZE
class CCDFProbeGroupInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeGroupInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeGroupInformation, name)
    __repr__ = _swig_repr
    def GetDirection(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetDirection(*args)
    def GetNumLists(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetNumLists(*args)
    def GetNumCells(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetNumCells(*args)
    def GetNumCellsPerList(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetNumCellsPerList(*args)
    def GetStart(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetStart(*args)
    def GetStop(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetStop(*args)
    def GetName(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetName(*args)
    def GetCell(*args): return _AffyFileParser.CCDFProbeGroupInformation_GetCell(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFProbeGroupInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeGroupInformation
    __del__ = lambda self : None;
CCDFProbeGroupInformation_swigregister = _AffyFileParser.CCDFProbeGroupInformation_swigregister
CCDFProbeGroupInformation_swigregister(CCDFProbeGroupInformation)

PROBE_GROUP_SIZE = _AffyFileParser.PROBE_GROUP_SIZE
class CCDFProbeSetInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeSetInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeSetInformation, name)
    __repr__ = _swig_repr
    def GetProbeSetType(*args): return _AffyFileParser.CCDFProbeSetInformation_GetProbeSetType(*args)
    def GetDirection(*args): return _AffyFileParser.CCDFProbeSetInformation_GetDirection(*args)
    def GetNumLists(*args): return _AffyFileParser.CCDFProbeSetInformation_GetNumLists(*args)
    def GetNumGroups(*args): return _AffyFileParser.CCDFProbeSetInformation_GetNumGroups(*args)
    def GetNumCells(*args): return _AffyFileParser.CCDFProbeSetInformation_GetNumCells(*args)
    def GetNumCellsPerList(*args): return _AffyFileParser.CCDFProbeSetInformation_GetNumCellsPerList(*args)
    def GetProbeSetNumber(*args): return _AffyFileParser.CCDFProbeSetInformation_GetProbeSetNumber(*args)
    def GetGroupInformation(*args): return _AffyFileParser.CCDFProbeSetInformation_GetGroupInformation(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFProbeSetInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeSetInformation
    __del__ = lambda self : None;
CCDFProbeSetInformation_swigregister = _AffyFileParser.CCDFProbeSetInformation_swigregister
CCDFProbeSetInformation_swigregister(CCDFProbeSetInformation)

PROBE_SET_SIZE = _AffyFileParser.PROBE_SET_SIZE
class CCDFProbeSetNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeSetNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeSetNames, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFProbeSetNames(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeSetNames
    __del__ = lambda self : None;
    def Clear(*args): return _AffyFileParser.CCDFProbeSetNames_Clear(*args)
    def GetName(*args): return _AffyFileParser.CCDFProbeSetNames_GetName(*args)
CCDFProbeSetNames_swigregister = _AffyFileParser.CCDFProbeSetNames_swigregister
CCDFProbeSetNames_swigregister(CCDFProbeSetNames)

class CCDFQCProbeInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFQCProbeInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFQCProbeInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFQCProbeInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetX(*args): return _AffyFileParser.CCDFQCProbeInformation_GetX(*args)
    def GetY(*args): return _AffyFileParser.CCDFQCProbeInformation_GetY(*args)
    def GetPLen(*args): return _AffyFileParser.CCDFQCProbeInformation_GetPLen(*args)
    def IsPerfectMatchProbe(*args): return _AffyFileParser.CCDFQCProbeInformation_IsPerfectMatchProbe(*args)
    def IsBackgroundProbe(*args): return _AffyFileParser.CCDFQCProbeInformation_IsBackgroundProbe(*args)
    __swig_destroy__ = _AffyFileParser.delete_CCDFQCProbeInformation
    __del__ = lambda self : None;
CCDFQCProbeInformation_swigregister = _AffyFileParser.CCDFQCProbeInformation_swigregister
CCDFQCProbeInformation_swigregister(CCDFQCProbeInformation)

QC_PROBE_SIZE = _AffyFileParser.QC_PROBE_SIZE
UnknownQCProbeSetType = _AffyFileParser.UnknownQCProbeSetType
CheckerboardNegativeQCProbeSetType = _AffyFileParser.CheckerboardNegativeQCProbeSetType
CheckerboardPositiveQCProbeSetType = _AffyFileParser.CheckerboardPositiveQCProbeSetType
HybNegativeQCProbeSetType = _AffyFileParser.HybNegativeQCProbeSetType
HybPositiveQCProbeSetType = _AffyFileParser.HybPositiveQCProbeSetType
TextFeaturesNegativeQCProbeSetType = _AffyFileParser.TextFeaturesNegativeQCProbeSetType
TextFeaturesPositiveQCProbeSetType = _AffyFileParser.TextFeaturesPositiveQCProbeSetType
CentralNegativeQCProbeSetType = _AffyFileParser.CentralNegativeQCProbeSetType
CentralPositiveQCProbeSetType = _AffyFileParser.CentralPositiveQCProbeSetType
GeneExpNegativeQCProbeSetType = _AffyFileParser.GeneExpNegativeQCProbeSetType
GeneExpPositiveQCProbeSetType = _AffyFileParser.GeneExpPositiveQCProbeSetType
CycleFidelityNegativeQCProbeSetType = _AffyFileParser.CycleFidelityNegativeQCProbeSetType
CycleFidelityPositiveQCProbeSetType = _AffyFileParser.CycleFidelityPositiveQCProbeSetType
CentralCrossNegativeQCProbeSetType = _AffyFileParser.CentralCrossNegativeQCProbeSetType
CentralCrossPositiveQCProbeSetType = _AffyFileParser.CentralCrossPositiveQCProbeSetType
CrossHybNegativeQCProbeSetType = _AffyFileParser.CrossHybNegativeQCProbeSetType
CrossHybPositiveQCProbeSetType = _AffyFileParser.CrossHybPositiveQCProbeSetType
SpatialNormalizationNegativeQCProbeSetType = _AffyFileParser.SpatialNormalizationNegativeQCProbeSetType
SpatialNormalizationPositiveQCProbeSetType = _AffyFileParser.SpatialNormalizationPositiveQCProbeSetType
class CCDFQCProbeSetInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFQCProbeSetInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFQCProbeSetInformation, name)
    __repr__ = _swig_repr
    def GetQCProbeSetType(*args): return _AffyFileParser.CCDFQCProbeSetInformation_GetQCProbeSetType(*args)
    def GetNumCells(*args): return _AffyFileParser.CCDFQCProbeSetInformation_GetNumCells(*args)
    def GetProbeInformation(*args): return _AffyFileParser.CCDFQCProbeSetInformation_GetProbeInformation(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFQCProbeSetInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFQCProbeSetInformation
    __del__ = lambda self : None;
CCDFQCProbeSetInformation_swigregister = _AffyFileParser.CCDFQCProbeSetInformation_swigregister
CCDFQCProbeSetInformation_swigregister(CCDFQCProbeSetInformation)

QC_PROBE_SET_SIZE = _AffyFileParser.QC_PROBE_SET_SIZE
class CCDFFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFFileData, name)
    __repr__ = _swig_repr
    def SetFileName(*args): return _AffyFileParser.CCDFFileData_SetFileName(*args)
    def GetFileName(*args): return _AffyFileParser.CCDFFileData_GetFileName(*args)
    def GetHeader(*args): return _AffyFileParser.CCDFFileData_GetHeader(*args)
    def GetError(*args): return _AffyFileParser.CCDFFileData_GetError(*args)
    def GetProbeSetName(*args): return _AffyFileParser.CCDFFileData_GetProbeSetName(*args)
    def GetChipType(*args): return _AffyFileParser.CCDFFileData_GetChipType(*args)
    def Read(*args): return _AffyFileParser.CCDFFileData_Read(*args)
    def ReadHeader(*args): return _AffyFileParser.CCDFFileData_ReadHeader(*args)
    def Exists(*args): return _AffyFileParser.CCDFFileData_Exists(*args)
    def Close(*args): return _AffyFileParser.CCDFFileData_Close(*args)
    def IsXDACompatibleFile(*args): return _AffyFileParser.CCDFFileData_IsXDACompatibleFile(*args)
    def GetProbeSetType(*args): return _AffyFileParser.CCDFFileData_GetProbeSetType(*args)
    def GetProbeSetInformation(*args): return _AffyFileParser.CCDFFileData_GetProbeSetInformation(*args)
    def GetQCProbeSetInformation(*args): return _AffyFileParser.CCDFFileData_GetQCProbeSetInformation(*args)
    def GetQCProbeSetInformation_By_Type(*args): return _AffyFileParser.CCDFFileData_GetQCProbeSetInformation_By_Type(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCDFFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFFileData
    __del__ = lambda self : None;
CCDFFileData_swigregister = _AffyFileParser.CCDFFileData_swigregister
CCDFFileData_swigregister(CCDFFileData)

class BackgroundZoneType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackgroundZoneType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackgroundZoneType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["centerx"] = _AffyFileParser.BackgroundZoneType_centerx_set
    __swig_getmethods__["centerx"] = _AffyFileParser.BackgroundZoneType_centerx_get
    if _newclass:centerx = _swig_property(_AffyFileParser.BackgroundZoneType_centerx_get, _AffyFileParser.BackgroundZoneType_centerx_set)
    __swig_setmethods__["centery"] = _AffyFileParser.BackgroundZoneType_centery_set
    __swig_getmethods__["centery"] = _AffyFileParser.BackgroundZoneType_centery_get
    if _newclass:centery = _swig_property(_AffyFileParser.BackgroundZoneType_centery_get, _AffyFileParser.BackgroundZoneType_centery_set)
    __swig_setmethods__["background"] = _AffyFileParser.BackgroundZoneType_background_set
    __swig_getmethods__["background"] = _AffyFileParser.BackgroundZoneType_background_get
    if _newclass:background = _swig_property(_AffyFileParser.BackgroundZoneType_background_get, _AffyFileParser.BackgroundZoneType_background_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_BackgroundZoneType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BackgroundZoneType
    __del__ = lambda self : None;
BackgroundZoneType_swigregister = _AffyFileParser.BackgroundZoneType_swigregister
BackgroundZoneType_swigregister(BackgroundZoneType)

class BackgroundZoneInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackgroundZoneInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackgroundZoneInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number_zones"] = _AffyFileParser.BackgroundZoneInfo_number_zones_set
    __swig_getmethods__["number_zones"] = _AffyFileParser.BackgroundZoneInfo_number_zones_get
    if _newclass:number_zones = _swig_property(_AffyFileParser.BackgroundZoneInfo_number_zones_get, _AffyFileParser.BackgroundZoneInfo_number_zones_set)
    __swig_setmethods__["smooth_factor"] = _AffyFileParser.BackgroundZoneInfo_smooth_factor_set
    __swig_getmethods__["smooth_factor"] = _AffyFileParser.BackgroundZoneInfo_smooth_factor_get
    if _newclass:smooth_factor = _swig_property(_AffyFileParser.BackgroundZoneInfo_smooth_factor_get, _AffyFileParser.BackgroundZoneInfo_smooth_factor_set)
    __swig_setmethods__["zones"] = _AffyFileParser.BackgroundZoneInfo_zones_set
    __swig_getmethods__["zones"] = _AffyFileParser.BackgroundZoneInfo_zones_get
    if _newclass:zones = _swig_property(_AffyFileParser.BackgroundZoneInfo_zones_get, _AffyFileParser.BackgroundZoneInfo_zones_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_BackgroundZoneInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BackgroundZoneInfo
    __del__ = lambda self : None;
BackgroundZoneInfo_swigregister = _AffyFileParser.BackgroundZoneInfo_swigregister
BackgroundZoneInfo_swigregister(BackgroundZoneInfo)

class CCHPFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCHPFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCHPFileHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCHPFileHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCHPFileHeader
    __del__ = lambda self : None;
    Expression = _AffyFileParser.CCHPFileHeader_Expression
    Genotyping = _AffyFileParser.CCHPFileHeader_Genotyping
    Resequencing = _AffyFileParser.CCHPFileHeader_Resequencing
    Universal = _AffyFileParser.CCHPFileHeader_Universal
    Unknown = _AffyFileParser.CCHPFileHeader_Unknown
    def GetCols(*args): return _AffyFileParser.CCHPFileHeader_GetCols(*args)
    def GetRows(*args): return _AffyFileParser.CCHPFileHeader_GetRows(*args)
    def GetNumProbeSets(*args): return _AffyFileParser.CCHPFileHeader_GetNumProbeSets(*args)
    def GetAssayType(*args): return _AffyFileParser.CCHPFileHeader_GetAssayType(*args)
    def GetChipType(*args): return _AffyFileParser.CCHPFileHeader_GetChipType(*args)
    def GetAlgName(*args): return _AffyFileParser.CCHPFileHeader_GetAlgName(*args)
    def GetAlgVersion(*args): return _AffyFileParser.CCHPFileHeader_GetAlgVersion(*args)
    def AlgorithmParameters(*args): return _AffyFileParser.CCHPFileHeader_AlgorithmParameters(*args)
    def SummaryParameters(*args): return _AffyFileParser.CCHPFileHeader_SummaryParameters(*args)
    def GetParentCellFile(*args): return _AffyFileParser.CCHPFileHeader_GetParentCellFile(*args)
    def GetProgID(*args): return _AffyFileParser.CCHPFileHeader_GetProgID(*args)
    def GetAlgorithmParameter(*args): return _AffyFileParser.CCHPFileHeader_GetAlgorithmParameter(*args)
    def GetSummaryParameter(*args): return _AffyFileParser.CCHPFileHeader_GetSummaryParameter(*args)
    def GetBackgroundZoneInfo(*args): return _AffyFileParser.CCHPFileHeader_GetBackgroundZoneInfo(*args)
    def GetBackgroundZones(*args): return _AffyFileParser.CCHPFileHeader_GetBackgroundZones(*args)
    def GetBackgroundZone(*args): return _AffyFileParser.CCHPFileHeader_GetBackgroundZone(*args)
    def GetMagicNumber(*args): return _AffyFileParser.CCHPFileHeader_GetMagicNumber(*args)
    def GetVersionNumber(*args): return _AffyFileParser.CCHPFileHeader_GetVersionNumber(*args)
    def SetCols(*args): return _AffyFileParser.CCHPFileHeader_SetCols(*args)
    def SetRows(*args): return _AffyFileParser.CCHPFileHeader_SetRows(*args)
    def SetNumProbeSets(*args): return _AffyFileParser.CCHPFileHeader_SetNumProbeSets(*args)
    def SetAssayType(*args): return _AffyFileParser.CCHPFileHeader_SetAssayType(*args)
    def SetChipType(*args): return _AffyFileParser.CCHPFileHeader_SetChipType(*args)
    def SetAlgName(*args): return _AffyFileParser.CCHPFileHeader_SetAlgName(*args)
    def SetAlgVersion(*args): return _AffyFileParser.CCHPFileHeader_SetAlgVersion(*args)
    def SetParentCellFile(*args): return _AffyFileParser.CCHPFileHeader_SetParentCellFile(*args)
    def SetProgID(*args): return _AffyFileParser.CCHPFileHeader_SetProgID(*args)
CCHPFileHeader_swigregister = _AffyFileParser.CCHPFileHeader_swigregister
CCHPFileHeader_swigregister(CCHPFileHeader)

class CProbeSetResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProbeSetResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProbeSetResults, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CProbeSetResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CProbeSetResults
    __del__ = lambda self : None;
CProbeSetResults_swigregister = _AffyFileParser.CProbeSetResults_swigregister
CProbeSetResults_swigregister(CProbeSetResults)

ABS_PRESENT_CALL = _AffyFileParser.ABS_PRESENT_CALL
ABS_MARGINAL_CALL = _AffyFileParser.ABS_MARGINAL_CALL
ABS_ABSENT_CALL = _AffyFileParser.ABS_ABSENT_CALL
ABS_NO_CALL = _AffyFileParser.ABS_NO_CALL
COMP_INCREASE_CALL = _AffyFileParser.COMP_INCREASE_CALL
COMP_DECREASE_CALL = _AffyFileParser.COMP_DECREASE_CALL
COMP_MOD_INCREASE_CALL = _AffyFileParser.COMP_MOD_INCREASE_CALL
COMP_MOD_DECREASE_CALL = _AffyFileParser.COMP_MOD_DECREASE_CALL
COMP_NO_CHANGE_CALL = _AffyFileParser.COMP_NO_CHANGE_CALL
COMP_NO_CALL = _AffyFileParser.COMP_NO_CALL
class CExpressionProbeSetResults(CProbeSetResults):
    __swig_setmethods__ = {}
    for _s in [CProbeSetResults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExpressionProbeSetResults, name, value)
    __swig_getmethods__ = {}
    for _s in [CProbeSetResults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExpressionProbeSetResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DetectionPValue"] = _AffyFileParser.CExpressionProbeSetResults_DetectionPValue_set
    __swig_getmethods__["DetectionPValue"] = _AffyFileParser.CExpressionProbeSetResults_DetectionPValue_get
    if _newclass:DetectionPValue = _swig_property(_AffyFileParser.CExpressionProbeSetResults_DetectionPValue_get, _AffyFileParser.CExpressionProbeSetResults_DetectionPValue_set)
    __swig_setmethods__["Signal"] = _AffyFileParser.CExpressionProbeSetResults_Signal_set
    __swig_getmethods__["Signal"] = _AffyFileParser.CExpressionProbeSetResults_Signal_get
    if _newclass:Signal = _swig_property(_AffyFileParser.CExpressionProbeSetResults_Signal_get, _AffyFileParser.CExpressionProbeSetResults_Signal_set)
    __swig_setmethods__["NumPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumPairs_set
    __swig_getmethods__["NumPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumPairs_get
    if _newclass:NumPairs = _swig_property(_AffyFileParser.CExpressionProbeSetResults_NumPairs_get, _AffyFileParser.CExpressionProbeSetResults_NumPairs_set)
    __swig_setmethods__["NumUsedPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_set
    __swig_getmethods__["NumUsedPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_get
    if _newclass:NumUsedPairs = _swig_property(_AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_get, _AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_set)
    __swig_setmethods__["Detection"] = _AffyFileParser.CExpressionProbeSetResults_Detection_set
    __swig_getmethods__["Detection"] = _AffyFileParser.CExpressionProbeSetResults_Detection_get
    if _newclass:Detection = _swig_property(_AffyFileParser.CExpressionProbeSetResults_Detection_get, _AffyFileParser.CExpressionProbeSetResults_Detection_set)
    __swig_setmethods__["m_HasCompResults"] = _AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_set
    __swig_getmethods__["m_HasCompResults"] = _AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_get
    if _newclass:m_HasCompResults = _swig_property(_AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_get, _AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_set)
    __swig_setmethods__["ChangePValue"] = _AffyFileParser.CExpressionProbeSetResults_ChangePValue_set
    __swig_getmethods__["ChangePValue"] = _AffyFileParser.CExpressionProbeSetResults_ChangePValue_get
    if _newclass:ChangePValue = _swig_property(_AffyFileParser.CExpressionProbeSetResults_ChangePValue_get, _AffyFileParser.CExpressionProbeSetResults_ChangePValue_set)
    __swig_setmethods__["SignalLogRatio"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_set
    __swig_getmethods__["SignalLogRatio"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_get
    if _newclass:SignalLogRatio = _swig_property(_AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_get, _AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_set)
    __swig_setmethods__["SignalLogRatioLow"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_set
    __swig_getmethods__["SignalLogRatioLow"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_get
    if _newclass:SignalLogRatioLow = _swig_property(_AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_get, _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_set)
    __swig_setmethods__["SignalLogRatioHigh"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_set
    __swig_getmethods__["SignalLogRatioHigh"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_get
    if _newclass:SignalLogRatioHigh = _swig_property(_AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_get, _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_set)
    __swig_setmethods__["NumCommonPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_set
    __swig_getmethods__["NumCommonPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_get
    if _newclass:NumCommonPairs = _swig_property(_AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_get, _AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_set)
    __swig_setmethods__["Change"] = _AffyFileParser.CExpressionProbeSetResults_Change_set
    __swig_getmethods__["Change"] = _AffyFileParser.CExpressionProbeSetResults_Change_get
    if _newclass:Change = _swig_property(_AffyFileParser.CExpressionProbeSetResults_Change_get, _AffyFileParser.CExpressionProbeSetResults_Change_set)
    def GetDetectionString(*args): return _AffyFileParser.CExpressionProbeSetResults_GetDetectionString(*args)
    def GetChangeString(*args): return _AffyFileParser.CExpressionProbeSetResults_GetChangeString(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CExpressionProbeSetResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CExpressionProbeSetResults
    __del__ = lambda self : None;
CExpressionProbeSetResults_swigregister = _AffyFileParser.CExpressionProbeSetResults_swigregister
CExpressionProbeSetResults_swigregister(CExpressionProbeSetResults)

ALLELE_A_CALL = _AffyFileParser.ALLELE_A_CALL
ALLELE_B_CALL = _AffyFileParser.ALLELE_B_CALL
ALLELE_AB_CALL = _AffyFileParser.ALLELE_AB_CALL
ALLELE_NO_CALL = _AffyFileParser.ALLELE_NO_CALL
class CGenotypeProbeSetResults(CProbeSetResults):
    __swig_setmethods__ = {}
    for _s in [CProbeSetResults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGenotypeProbeSetResults, name, value)
    __swig_getmethods__ = {}
    for _s in [CProbeSetResults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGenotypeProbeSetResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AlleleCall"] = _AffyFileParser.CGenotypeProbeSetResults_AlleleCall_set
    __swig_getmethods__["AlleleCall"] = _AffyFileParser.CGenotypeProbeSetResults_AlleleCall_get
    if _newclass:AlleleCall = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_AlleleCall_get, _AffyFileParser.CGenotypeProbeSetResults_AlleleCall_set)
    __swig_setmethods__["Confidence"] = _AffyFileParser.CGenotypeProbeSetResults_Confidence_set
    __swig_getmethods__["Confidence"] = _AffyFileParser.CGenotypeProbeSetResults_Confidence_get
    if _newclass:Confidence = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_Confidence_get, _AffyFileParser.CGenotypeProbeSetResults_Confidence_set)
    __swig_setmethods__["RAS1"] = _AffyFileParser.CGenotypeProbeSetResults_RAS1_set
    __swig_getmethods__["RAS1"] = _AffyFileParser.CGenotypeProbeSetResults_RAS1_get
    if _newclass:RAS1 = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_RAS1_get, _AffyFileParser.CGenotypeProbeSetResults_RAS1_set)
    __swig_setmethods__["RAS2"] = _AffyFileParser.CGenotypeProbeSetResults_RAS2_set
    __swig_getmethods__["RAS2"] = _AffyFileParser.CGenotypeProbeSetResults_RAS2_get
    if _newclass:RAS2 = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_RAS2_get, _AffyFileParser.CGenotypeProbeSetResults_RAS2_set)
    __swig_setmethods__["pvalue_AA"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_set
    __swig_getmethods__["pvalue_AA"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_get
    if _newclass:pvalue_AA = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_set)
    __swig_setmethods__["pvalue_AB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_set
    __swig_getmethods__["pvalue_AB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_get
    if _newclass:pvalue_AB = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_set)
    __swig_setmethods__["pvalue_BB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_set
    __swig_getmethods__["pvalue_BB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_get
    if _newclass:pvalue_BB = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_set)
    __swig_setmethods__["pvalue_NoCall"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_set
    __swig_getmethods__["pvalue_NoCall"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_get
    if _newclass:pvalue_NoCall = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_set)
    def GetAlleleCallString(*args): return _AffyFileParser.CGenotypeProbeSetResults_GetAlleleCallString(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CGenotypeProbeSetResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGenotypeProbeSetResults
    __del__ = lambda self : None;
CGenotypeProbeSetResults_swigregister = _AffyFileParser.CGenotypeProbeSetResults_swigregister
CGenotypeProbeSetResults_swigregister(CGenotypeProbeSetResults)

class CUniversalProbeSetResults(CProbeSetResults):
    __swig_setmethods__ = {}
    for _s in [CProbeSetResults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUniversalProbeSetResults, name, value)
    __swig_getmethods__ = {}
    for _s in [CProbeSetResults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CUniversalProbeSetResults, name)
    __repr__ = _swig_repr
    def GetBackground(*args): return _AffyFileParser.CUniversalProbeSetResults_GetBackground(*args)
    def SetBackground(*args): return _AffyFileParser.CUniversalProbeSetResults_SetBackground(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CUniversalProbeSetResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CUniversalProbeSetResults
    __del__ = lambda self : None;
CUniversalProbeSetResults_swigregister = _AffyFileParser.CUniversalProbeSetResults_swigregister
CUniversalProbeSetResults_swigregister(CUniversalProbeSetResults)

class ForceCallType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceCallType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceCallType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _AffyFileParser.ForceCallType_position_set
    __swig_getmethods__["position"] = _AffyFileParser.ForceCallType_position_get
    if _newclass:position = _swig_property(_AffyFileParser.ForceCallType_position_get, _AffyFileParser.ForceCallType_position_set)
    __swig_setmethods__["call"] = _AffyFileParser.ForceCallType_call_set
    __swig_getmethods__["call"] = _AffyFileParser.ForceCallType_call_get
    if _newclass:call = _swig_property(_AffyFileParser.ForceCallType_call_get, _AffyFileParser.ForceCallType_call_set)
    __swig_setmethods__["reason"] = _AffyFileParser.ForceCallType_reason_set
    __swig_getmethods__["reason"] = _AffyFileParser.ForceCallType_reason_get
    if _newclass:reason = _swig_property(_AffyFileParser.ForceCallType_reason_get, _AffyFileParser.ForceCallType_reason_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_ForceCallType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_ForceCallType
    __del__ = lambda self : None;
ForceCallType_swigregister = _AffyFileParser.ForceCallType_swigregister
ForceCallType_swigregister(ForceCallType)

NO_SIGNAL_THR_FORCE_CALL = _AffyFileParser.NO_SIGNAL_THR_FORCE_CALL
WEAK_SIGNAL_THR_FORCE_CALL = _AffyFileParser.WEAK_SIGNAL_THR_FORCE_CALL
SATURATION_LEVEL_FORCE_CALL = _AffyFileParser.SATURATION_LEVEL_FORCE_CALL
QUALITY_SCORE_THR_FORCE_CALL = _AffyFileParser.QUALITY_SCORE_THR_FORCE_CALL
TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL = _AffyFileParser.TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL
RELIABILITY_THR_FORCE_CALL = _AffyFileParser.RELIABILITY_THR_FORCE_CALL
class BaseCallType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCallType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCallType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _AffyFileParser.BaseCallType_position_set
    __swig_getmethods__["position"] = _AffyFileParser.BaseCallType_position_get
    if _newclass:position = _swig_property(_AffyFileParser.BaseCallType_position_get, _AffyFileParser.BaseCallType_position_set)
    __swig_setmethods__["call"] = _AffyFileParser.BaseCallType_call_set
    __swig_getmethods__["call"] = _AffyFileParser.BaseCallType_call_get
    if _newclass:call = _swig_property(_AffyFileParser.BaseCallType_call_get, _AffyFileParser.BaseCallType_call_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_BaseCallType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BaseCallType
    __del__ = lambda self : None;
BaseCallType_swigregister = _AffyFileParser.BaseCallType_swigregister
BaseCallType_swigregister(BaseCallType)

class CResequencingResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CResequencingResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CResequencingResults, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CResequencingResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CResequencingResults
    __del__ = lambda self : None;
    def Clear(*args): return _AffyFileParser.CResequencingResults_Clear(*args)
    def GetCalledBases(*args): return _AffyFileParser.CResequencingResults_GetCalledBases(*args)
    def GetCalledBase(*args): return _AffyFileParser.CResequencingResults_GetCalledBase(*args)
    def GetCalledBasesSize(*args): return _AffyFileParser.CResequencingResults_GetCalledBasesSize(*args)
    def ResizeCalledBases(*args): return _AffyFileParser.CResequencingResults_ResizeCalledBases(*args)
    def SetCalledBase(*args): return _AffyFileParser.CResequencingResults_SetCalledBase(*args)
    def GetScores(*args): return _AffyFileParser.CResequencingResults_GetScores(*args)
    def GetScore(*args): return _AffyFileParser.CResequencingResults_GetScore(*args)
    def GetScoresSize(*args): return _AffyFileParser.CResequencingResults_GetScoresSize(*args)
    def ResizeScores(*args): return _AffyFileParser.CResequencingResults_ResizeScores(*args)
    def SetScore(*args): return _AffyFileParser.CResequencingResults_SetScore(*args)
    def GetForceCalls(*args): return _AffyFileParser.CResequencingResults_GetForceCalls(*args)
    def GetForceCall(*args): return _AffyFileParser.CResequencingResults_GetForceCall(*args)
    def GetForceCallsSize(*args): return _AffyFileParser.CResequencingResults_GetForceCallsSize(*args)
    def ResizeForceCalls(*args): return _AffyFileParser.CResequencingResults_ResizeForceCalls(*args)
    def SetForceCall(*args): return _AffyFileParser.CResequencingResults_SetForceCall(*args)
    def GetOrigCalls(*args): return _AffyFileParser.CResequencingResults_GetOrigCalls(*args)
    def GetOrigCall(*args): return _AffyFileParser.CResequencingResults_GetOrigCall(*args)
    def GetOrigCallsSize(*args): return _AffyFileParser.CResequencingResults_GetOrigCallsSize(*args)
    def ResizeOrigCalls(*args): return _AffyFileParser.CResequencingResults_ResizeOrigCalls(*args)
    def SetOrigCall(*args): return _AffyFileParser.CResequencingResults_SetOrigCall(*args)
CResequencingResults_swigregister = _AffyFileParser.CResequencingResults_swigregister
CResequencingResults_swigregister(CResequencingResults)

class CCHPFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCHPFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCHPFileData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCHPFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCHPFileData
    __del__ = lambda self : None;
    def GetHeader(*args): return _AffyFileParser.CCHPFileData_GetHeader(*args)
    def GetExpressionResults(*args): return _AffyFileParser.CCHPFileData_GetExpressionResults(*args)
    def GetGenotypingResults(*args): return _AffyFileParser.CCHPFileData_GetGenotypingResults(*args)
    def GetUniversalResults(*args): return _AffyFileParser.CCHPFileData_GetUniversalResults(*args)
    def GetResequencingResults(*args): return _AffyFileParser.CCHPFileData_GetResequencingResults(*args)
    def GetError(*args): return _AffyFileParser.CCHPFileData_GetError(*args)
    def Read(*args): return _AffyFileParser.CCHPFileData_Read(*args)
    def ReadHeader(*args): return _AffyFileParser.CCHPFileData_ReadHeader(*args)
    def Exists(*args): return _AffyFileParser.CCHPFileData_Exists(*args)
    def IsXDACompatibleFile(*args): return _AffyFileParser.CCHPFileData_IsXDACompatibleFile(*args)
    def SetFileName(*args): return _AffyFileParser.CCHPFileData_SetFileName(*args)
    def GetFileName(*args): return _AffyFileParser.CCHPFileData_GetFileName(*args)
    def Clear(*args): return _AffyFileParser.CCHPFileData_Clear(*args)
CCHPFileData_swigregister = _AffyFileParser.CCHPFileData_swigregister
CCHPFileData_swigregister(CCHPFileData)

class CCHPFileWriter(CCHPFileData):
    __swig_setmethods__ = {}
    for _s in [CCHPFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCHPFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CCHPFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCHPFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCHPFileWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCHPFileWriter
    __del__ = lambda self : None;
    def CreateNewFile(*args): return _AffyFileParser.CCHPFileWriter_CreateNewFile(*args)
    def InitializeForWriting(*args): return _AffyFileParser.CCHPFileWriter_InitializeForWriting(*args)
    def SetParentCelFileName(*args): return _AffyFileParser.CCHPFileWriter_SetParentCelFileName(*args)
    def SetProgID(*args): return _AffyFileParser.CCHPFileWriter_SetProgID(*args)
    def SetAlgorithmName(*args): return _AffyFileParser.CCHPFileWriter_SetAlgorithmName(*args)
    def SetAlgorithmVersion(*args): return _AffyFileParser.CCHPFileWriter_SetAlgorithmVersion(*args)
    def AddAlgorithmParameter(*args): return _AffyFileParser.CCHPFileWriter_AddAlgorithmParameter(*args)
    def AddChipSummaryParameter(*args): return _AffyFileParser.CCHPFileWriter_AddChipSummaryParameter(*args)
    def SetExpressionEntry(*args): return _AffyFileParser.CCHPFileWriter_SetExpressionEntry(*args)
    def SetMappingEntry(*args): return _AffyFileParser.CCHPFileWriter_SetMappingEntry(*args)
    def Save(*args): return _AffyFileParser.CCHPFileWriter_Save(*args)
    def AddBackgroundInfo(*args): return _AffyFileParser.CCHPFileWriter_AddBackgroundInfo(*args)
    def AddBackgroundZone(*args): return _AffyFileParser.CCHPFileWriter_AddBackgroundZone(*args)
CCHPFileWriter_swigregister = _AffyFileParser.CCHPFileWriter_swigregister
CCHPFileWriter_swigregister(CCHPFileWriter)

BROWSER_LINE_START = _AffyFileParser.BROWSER_LINE_START
TRACK_LINE_START = _AffyFileParser.TRACK_LINE_START
DEFAULT_TRACK_NAME = _AffyFileParser.DEFAULT_TRACK_NAME
class IntervalGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parameters"] = _AffyFileParser.IntervalGroup_parameters_set
    __swig_getmethods__["parameters"] = _AffyFileParser.IntervalGroup_parameters_get
    if _newclass:parameters = _swig_property(_AffyFileParser.IntervalGroup_parameters_get, _AffyFileParser.IntervalGroup_parameters_set)
    __swig_setmethods__["intervals"] = _AffyFileParser.IntervalGroup_intervals_set
    __swig_getmethods__["intervals"] = _AffyFileParser.IntervalGroup_intervals_get
    if _newclass:intervals = _swig_property(_AffyFileParser.IntervalGroup_intervals_get, _AffyFileParser.IntervalGroup_intervals_set)
    def Clear(*args): return _AffyFileParser.IntervalGroup_Clear(*args)
    def __init__(self, *args): 
        this = _AffyFileParser.new_IntervalGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_IntervalGroup
    __del__ = lambda self : None;
IntervalGroup_swigregister = _AffyFileParser.IntervalGroup_swigregister
IntervalGroup_swigregister(IntervalGroup)

class BEDFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BEDFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BEDFileData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_BEDFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BEDFileData
    __del__ = lambda self : None;
    def Clear(*args): return _AffyFileParser.BEDFileData_Clear(*args)
    def FileName(*args): return _AffyFileParser.BEDFileData_FileName(*args)
    def Browser(*args): return _AffyFileParser.BEDFileData_Browser(*args)
    def Track(*args): return _AffyFileParser.BEDFileData_Track(*args)
    def FormatBrowser(*args): return _AffyFileParser.BEDFileData_FormatBrowser(*args)
    def FormatTrack(*args): return _AffyFileParser.BEDFileData_FormatTrack(*args)
    def IntervalGroups(*args): return _AffyFileParser.BEDFileData_IntervalGroups(*args)
    def Read(*args): return _AffyFileParser.BEDFileData_Read(*args)
BEDFileData_swigregister = _AffyFileParser.BEDFileData_swigregister
BEDFileData_swigregister(BEDFileData)

class BEDFileWriter(BEDFileData):
    __swig_setmethods__ = {}
    for _s in [BEDFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BEDFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [BEDFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BEDFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_BEDFileWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BEDFileWriter
    __del__ = lambda self : None;
    def Write(*args): return _AffyFileParser.BEDFileWriter_Write(*args)
BEDFileWriter_swigregister = _AffyFileParser.BEDFileWriter_swigregister
BEDFileWriter_swigregister(BEDFileWriter)

BAR_DATA_DOUBLE = _AffyFileParser.BAR_DATA_DOUBLE
BAR_DATA_FLOAT = _AffyFileParser.BAR_DATA_FLOAT
BAR_DATA_INTEGER = _AffyFileParser.BAR_DATA_INTEGER
BAR_DATA_SHORT = _AffyFileParser.BAR_DATA_SHORT
BAR_DATA_CHAR = _AffyFileParser.BAR_DATA_CHAR
BAR_DATA_UINTEGER = _AffyFileParser.BAR_DATA_UINTEGER
BAR_DATA_USHORT = _AffyFileParser.BAR_DATA_USHORT
BAR_DATA_UCHAR = _AffyFileParser.BAR_DATA_UCHAR
class BarSequenceResultData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarSequenceResultData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BarSequenceResultData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dValue"] = _AffyFileParser.BarSequenceResultData_dValue_set
    __swig_getmethods__["dValue"] = _AffyFileParser.BarSequenceResultData_dValue_get
    if _newclass:dValue = _swig_property(_AffyFileParser.BarSequenceResultData_dValue_get, _AffyFileParser.BarSequenceResultData_dValue_set)
    __swig_setmethods__["fValue"] = _AffyFileParser.BarSequenceResultData_fValue_set
    __swig_getmethods__["fValue"] = _AffyFileParser.BarSequenceResultData_fValue_get
    if _newclass:fValue = _swig_property(_AffyFileParser.BarSequenceResultData_fValue_get, _AffyFileParser.BarSequenceResultData_fValue_set)
    __swig_setmethods__["iValue"] = _AffyFileParser.BarSequenceResultData_iValue_set
    __swig_getmethods__["iValue"] = _AffyFileParser.BarSequenceResultData_iValue_get
    if _newclass:iValue = _swig_property(_AffyFileParser.BarSequenceResultData_iValue_get, _AffyFileParser.BarSequenceResultData_iValue_set)
    __swig_setmethods__["sValue"] = _AffyFileParser.BarSequenceResultData_sValue_set
    __swig_getmethods__["sValue"] = _AffyFileParser.BarSequenceResultData_sValue_get
    if _newclass:sValue = _swig_property(_AffyFileParser.BarSequenceResultData_sValue_get, _AffyFileParser.BarSequenceResultData_sValue_set)
    __swig_setmethods__["cValue"] = _AffyFileParser.BarSequenceResultData_cValue_set
    __swig_getmethods__["cValue"] = _AffyFileParser.BarSequenceResultData_cValue_get
    if _newclass:cValue = _swig_property(_AffyFileParser.BarSequenceResultData_cValue_get, _AffyFileParser.BarSequenceResultData_cValue_set)
    __swig_setmethods__["uiValue"] = _AffyFileParser.BarSequenceResultData_uiValue_set
    __swig_getmethods__["uiValue"] = _AffyFileParser.BarSequenceResultData_uiValue_get
    if _newclass:uiValue = _swig_property(_AffyFileParser.BarSequenceResultData_uiValue_get, _AffyFileParser.BarSequenceResultData_uiValue_set)
    __swig_setmethods__["usValue"] = _AffyFileParser.BarSequenceResultData_usValue_set
    __swig_getmethods__["usValue"] = _AffyFileParser.BarSequenceResultData_usValue_get
    if _newclass:usValue = _swig_property(_AffyFileParser.BarSequenceResultData_usValue_get, _AffyFileParser.BarSequenceResultData_usValue_set)
    __swig_setmethods__["ucValue"] = _AffyFileParser.BarSequenceResultData_ucValue_set
    __swig_getmethods__["ucValue"] = _AffyFileParser.BarSequenceResultData_ucValue_get
    if _newclass:ucValue = _swig_property(_AffyFileParser.BarSequenceResultData_ucValue_get, _AffyFileParser.BarSequenceResultData_ucValue_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_BarSequenceResultData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BarSequenceResultData
    __del__ = lambda self : None;
BarSequenceResultData_swigregister = _AffyFileParser.BarSequenceResultData_swigregister
BarSequenceResultData_swigregister(BarSequenceResultData)

class CGDACSequenceResultItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDACSequenceResultItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGDACSequenceResultItem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CGDACSequenceResultItem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGDACSequenceResultItem
    __del__ = lambda self : None;
    def GetName(*args): return _AffyFileParser.CGDACSequenceResultItem_GetName(*args)
    def GetVersion(*args): return _AffyFileParser.CGDACSequenceResultItem_GetVersion(*args)
    def GetGroupName(*args): return _AffyFileParser.CGDACSequenceResultItem_GetGroupName(*args)
    def GetNumberDataPoints(*args): return _AffyFileParser.CGDACSequenceResultItem_GetNumberDataPoints(*args)
    def GetNumberColumns(*args): return _AffyFileParser.CGDACSequenceResultItem_GetNumberColumns(*args)
    def GetColumnType(*args): return _AffyFileParser.CGDACSequenceResultItem_GetColumnType(*args)
    def GetData(*args): return _AffyFileParser.CGDACSequenceResultItem_GetData(*args)
    def GetNumberParameters(*args): return _AffyFileParser.CGDACSequenceResultItem_GetNumberParameters(*args)
    def GetParameter(*args): return _AffyFileParser.CGDACSequenceResultItem_GetParameter(*args)
    def SetName(*args): return _AffyFileParser.CGDACSequenceResultItem_SetName(*args)
    def SetVersion(*args): return _AffyFileParser.CGDACSequenceResultItem_SetVersion(*args)
    def SetGroupName(*args): return _AffyFileParser.CGDACSequenceResultItem_SetGroupName(*args)
    def SetNumberDataPoints(*args): return _AffyFileParser.CGDACSequenceResultItem_SetNumberDataPoints(*args)
    def SetDataPoint(*args): return _AffyFileParser.CGDACSequenceResultItem_SetDataPoint(*args)
    def AddParameter(*args): return _AffyFileParser.CGDACSequenceResultItem_AddParameter(*args)
CGDACSequenceResultItem_swigregister = _AffyFileParser.CGDACSequenceResultItem_swigregister
CGDACSequenceResultItem_swigregister(CGDACSequenceResultItem)

class CBARFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBARFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBARFileData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CBARFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBARFileData
    __del__ = lambda self : None;
    def SetFileName(*args): return _AffyFileParser.CBARFileData_SetFileName(*args)
    def GetFileName(*args): return _AffyFileParser.CBARFileData_GetFileName(*args)
    def Read(*args): return _AffyFileParser.CBARFileData_Read(*args)
    def ReadHeader(*args): return _AffyFileParser.CBARFileData_ReadHeader(*args)
    def Exists(*args): return _AffyFileParser.CBARFileData_Exists(*args)
    def Close(*args): return _AffyFileParser.CBARFileData_Close(*args)
    def GetError(*args): return _AffyFileParser.CBARFileData_GetError(*args)
    def GetVersion(*args): return _AffyFileParser.CBARFileData_GetVersion(*args)
    def GetNumberSequences(*args): return _AffyFileParser.CBARFileData_GetNumberSequences(*args)
    def GetNumberColumns(*args): return _AffyFileParser.CBARFileData_GetNumberColumns(*args)
    def GetNumberParameters(*args): return _AffyFileParser.CBARFileData_GetNumberParameters(*args)
    def GetParameter(*args): return _AffyFileParser.CBARFileData_GetParameter(*args)
    def GetColumnTypes(*args): return _AffyFileParser.CBARFileData_GetColumnTypes(*args)
    def GetResults(*args): return _AffyFileParser.CBARFileData_GetResults(*args)
    def AddAlgorithmParameter(*args): return _AffyFileParser.CBARFileData_AddAlgorithmParameter(*args)
    def AddColumn(*args): return _AffyFileParser.CBARFileData_AddColumn(*args)
    def SetNumberSequences(*args): return _AffyFileParser.CBARFileData_SetNumberSequences(*args)
    def GetResultsPtr(*args): return _AffyFileParser.CBARFileData_GetResultsPtr(*args)
CBARFileData_swigregister = _AffyFileParser.CBARFileData_swigregister
CBARFileData_swigregister(CBARFileData)

class CBARFileWriter(CBARFileData):
    __swig_setmethods__ = {}
    for _s in [CBARFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBARFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CBARFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBARFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CBARFileWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBARFileWriter
    __del__ = lambda self : None;
    def CreateNewFile(*args): return _AffyFileParser.CBARFileWriter_CreateNewFile(*args)
    def Save(*args): return _AffyFileParser.CBARFileWriter_Save(*args)
CBARFileWriter_swigregister = _AffyFileParser.CBARFileWriter_swigregister
CBARFileWriter_swigregister(CBARFileWriter)

BPMAP_FILE_HEADER_BYTES = _AffyFileParser.BPMAP_FILE_HEADER_BYTES
BPMAP_FILE_HEADER_LEN = _AffyFileParser.BPMAP_FILE_HEADER_LEN
PM_ONLY = _AffyFileParser.PM_ONLY
PM_MM = _AffyFileParser.PM_MM
PROBE_STORAGE_BUFFER_LENGTH = _AffyFileParser.PROBE_STORAGE_BUFFER_LENGTH
class GDACSequenceHitItemType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GDACSequenceHitItemType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GDACSequenceHitItemType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PMX"] = _AffyFileParser.GDACSequenceHitItemType_PMX_set
    __swig_getmethods__["PMX"] = _AffyFileParser.GDACSequenceHitItemType_PMX_get
    if _newclass:PMX = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PMX_get, _AffyFileParser.GDACSequenceHitItemType_PMX_set)
    __swig_setmethods__["PMY"] = _AffyFileParser.GDACSequenceHitItemType_PMY_set
    __swig_getmethods__["PMY"] = _AffyFileParser.GDACSequenceHitItemType_PMY_get
    if _newclass:PMY = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PMY_get, _AffyFileParser.GDACSequenceHitItemType_PMY_set)
    __swig_setmethods__["MMX"] = _AffyFileParser.GDACSequenceHitItemType_MMX_set
    __swig_getmethods__["MMX"] = _AffyFileParser.GDACSequenceHitItemType_MMX_get
    if _newclass:MMX = _swig_property(_AffyFileParser.GDACSequenceHitItemType_MMX_get, _AffyFileParser.GDACSequenceHitItemType_MMX_set)
    __swig_setmethods__["MMY"] = _AffyFileParser.GDACSequenceHitItemType_MMY_set
    __swig_getmethods__["MMY"] = _AffyFileParser.GDACSequenceHitItemType_MMY_get
    if _newclass:MMY = _swig_property(_AffyFileParser.GDACSequenceHitItemType_MMY_get, _AffyFileParser.GDACSequenceHitItemType_MMY_set)
    __swig_setmethods__["MatchScore"] = _AffyFileParser.GDACSequenceHitItemType_MatchScore_set
    __swig_getmethods__["MatchScore"] = _AffyFileParser.GDACSequenceHitItemType_MatchScore_get
    if _newclass:MatchScore = _swig_property(_AffyFileParser.GDACSequenceHitItemType_MatchScore_get, _AffyFileParser.GDACSequenceHitItemType_MatchScore_set)
    __swig_setmethods__["Position"] = _AffyFileParser.GDACSequenceHitItemType_Position_set
    __swig_getmethods__["Position"] = _AffyFileParser.GDACSequenceHitItemType_Position_get
    if _newclass:Position = _swig_property(_AffyFileParser.GDACSequenceHitItemType_Position_get, _AffyFileParser.GDACSequenceHitItemType_Position_set)
    __swig_setmethods__["PMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PMProbe_set
    __swig_getmethods__["PMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PMProbe_get
    if _newclass:PMProbe = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PMProbe_get, _AffyFileParser.GDACSequenceHitItemType_PMProbe_set)
    __swig_setmethods__["ProbeLength"] = _AffyFileParser.GDACSequenceHitItemType_ProbeLength_set
    __swig_getmethods__["ProbeLength"] = _AffyFileParser.GDACSequenceHitItemType_ProbeLength_get
    if _newclass:ProbeLength = _swig_property(_AffyFileParser.GDACSequenceHitItemType_ProbeLength_get, _AffyFileParser.GDACSequenceHitItemType_ProbeLength_set)
    __swig_setmethods__["TopStrand"] = _AffyFileParser.GDACSequenceHitItemType_TopStrand_set
    __swig_getmethods__["TopStrand"] = _AffyFileParser.GDACSequenceHitItemType_TopStrand_get
    if _newclass:TopStrand = _swig_property(_AffyFileParser.GDACSequenceHitItemType_TopStrand_get, _AffyFileParser.GDACSequenceHitItemType_TopStrand_set)
    def __lt__(*args): return _AffyFileParser.GDACSequenceHitItemType___lt__(*args)
    __swig_setmethods__["PackedPMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_set
    __swig_getmethods__["PackedPMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_get
    if _newclass:PackedPMProbe = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_get, _AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_GDACSequenceHitItemType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_GDACSequenceHitItemType
    __del__ = lambda self : None;
GDACSequenceHitItemType_swigregister = _AffyFileParser.GDACSequenceHitItemType_swigregister
GDACSequenceHitItemType_swigregister(GDACSequenceHitItemType)

HIT_ITEM_SIZE_WITH_PROBE_PAIRS = _AffyFileParser.HIT_ITEM_SIZE_WITH_PROBE_PAIRS
HIT_ITEM_SIZE_WITH_PM_ONLY = _AffyFileParser.HIT_ITEM_SIZE_WITH_PM_ONLY
class CGDACSequenceItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDACSequenceItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGDACSequenceItem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CGDACSequenceItem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGDACSequenceItem
    __del__ = lambda self : None;
    def GetName(*args): return _AffyFileParser.CGDACSequenceItem_GetName(*args)
    def GroupName(*args): return _AffyFileParser.CGDACSequenceItem_GroupName(*args)
    def GetSeqVersion(*args): return _AffyFileParser.CGDACSequenceItem_GetSeqVersion(*args)
    def GetProbeMapping(*args): return _AffyFileParser.CGDACSequenceItem_GetProbeMapping(*args)
    def GetNumber(*args): return _AffyFileParser.CGDACSequenceItem_GetNumber(*args)
    def GetNumberHits(*args): return _AffyFileParser.CGDACSequenceItem_GetNumberHits(*args)
    def GetNumberParameters(*args): return _AffyFileParser.CGDACSequenceItem_GetNumberParameters(*args)
    def GetParameter(*args): return _AffyFileParser.CGDACSequenceItem_GetParameter(*args)
    def GetHitItem(*args): return _AffyFileParser.CGDACSequenceItem_GetHitItem(*args)
CGDACSequenceItem_swigregister = _AffyFileParser.CGDACSequenceItem_swigregister
CGDACSequenceItem_swigregister(CGDACSequenceItem)

class CBPMAPFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBPMAPFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBPMAPFileData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CBPMAPFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBPMAPFileData
    __del__ = lambda self : None;
    def SetFileName(*args): return _AffyFileParser.CBPMAPFileData_SetFileName(*args)
    def GetFileName(*args): return _AffyFileParser.CBPMAPFileData_GetFileName(*args)
    def Read(*args): return _AffyFileParser.CBPMAPFileData_Read(*args)
    def ReadHeader(*args): return _AffyFileParser.CBPMAPFileData_ReadHeader(*args)
    def Exists(*args): return _AffyFileParser.CBPMAPFileData_Exists(*args)
    def Close(*args): return _AffyFileParser.CBPMAPFileData_Close(*args)
    def GetError(*args): return _AffyFileParser.CBPMAPFileData_GetError(*args)
    def GetNumberSequences(*args): return _AffyFileParser.CBPMAPFileData_GetNumberSequences(*args)
    def GetVersion(*args): return _AffyFileParser.CBPMAPFileData_GetVersion(*args)
    def GetSequenceItem(*args): return _AffyFileParser.CBPMAPFileData_GetSequenceItem(*args)
CBPMAPFileData_swigregister = _AffyFileParser.CBPMAPFileData_swigregister
CBPMAPFileData_swigregister(CBPMAPFileData)

BPMAP_VERSION = _AffyFileParser.BPMAP_VERSION
class CGDACSequenceItemWriter(CGDACSequenceItem):
    __swig_setmethods__ = {}
    for _s in [CGDACSequenceItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDACSequenceItemWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CGDACSequenceItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGDACSequenceItemWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CGDACSequenceItemWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGDACSequenceItemWriter
    __del__ = lambda self : None;
    def GetError(*args): return _AffyFileParser.CGDACSequenceItemWriter_GetError(*args)
    def copyMe(*args): return _AffyFileParser.CGDACSequenceItemWriter_copyMe(*args)
    def __lt__(*args): return _AffyFileParser.CGDACSequenceItemWriter___lt__(*args)
CGDACSequenceItemWriter_swigregister = _AffyFileParser.CGDACSequenceItemWriter_swigregister
CGDACSequenceItemWriter_swigregister(CGDACSequenceItemWriter)

class CBPMAPFileWriter(CBPMAPFileData):
    __swig_setmethods__ = {}
    for _s in [CBPMAPFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBPMAPFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CBPMAPFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBPMAPFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CBPMAPFileWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBPMAPFileWriter
    __del__ = lambda self : None;
    def GetTpmapFileName(*args): return _AffyFileParser.CBPMAPFileWriter_GetTpmapFileName(*args)
    def SetTpmapFileName(*args): return _AffyFileParser.CBPMAPFileWriter_SetTpmapFileName(*args)
    def WriteBpmap(*args): return _AffyFileParser.CBPMAPFileWriter_WriteBpmap(*args)
    def TpmapExists(*args): return _AffyFileParser.CBPMAPFileWriter_TpmapExists(*args)
    def ReadTpmap(*args): return _AffyFileParser.CBPMAPFileWriter_ReadTpmap(*args)
CBPMAPFileWriter_swigregister = _AffyFileParser.CBPMAPFileWriter_swigregister
CBPMAPFileWriter_swigregister(CBPMAPFileWriter)

class ProbeSetIndiciesType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeSetIndiciesType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeSetIndiciesType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["probeSetName"] = _AffyFileParser.ProbeSetIndiciesType_probeSetName_set
    __swig_getmethods__["probeSetName"] = _AffyFileParser.ProbeSetIndiciesType_probeSetName_get
    if _newclass:probeSetName = _swig_property(_AffyFileParser.ProbeSetIndiciesType_probeSetName_get, _AffyFileParser.ProbeSetIndiciesType_probeSetName_set)
    __swig_setmethods__["indicies"] = _AffyFileParser.ProbeSetIndiciesType_indicies_set
    __swig_getmethods__["indicies"] = _AffyFileParser.ProbeSetIndiciesType_indicies_get
    if _newclass:indicies = _swig_property(_AffyFileParser.ProbeSetIndiciesType_indicies_get, _AffyFileParser.ProbeSetIndiciesType_indicies_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_ProbeSetIndiciesType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_ProbeSetIndiciesType
    __del__ = lambda self : None;
ProbeSetIndiciesType_swigregister = _AffyFileParser.ProbeSetIndiciesType_swigregister
ProbeSetIndiciesType_swigregister(ProbeSetIndiciesType)

class CMSKFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMSKFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMSKFileData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CMSKFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CMSKFileData
    __del__ = lambda self : None;
    def SetFileName(*args): return _AffyFileParser.CMSKFileData_SetFileName(*args)
    def GetFileName(*args): return _AffyFileParser.CMSKFileData_GetFileName(*args)
    def GetArrayType(*args): return _AffyFileParser.CMSKFileData_GetArrayType(*args)
    def GetProbeSetIndiciesListCount(*args): return _AffyFileParser.CMSKFileData_GetProbeSetIndiciesListCount(*args)
    def GetProbeSetListCount(*args): return _AffyFileParser.CMSKFileData_GetProbeSetListCount(*args)
    def GetError(*args): return _AffyFileParser.CMSKFileData_GetError(*args)
    def GetProbeSetIndiciesIterators(*args): return _AffyFileParser.CMSKFileData_GetProbeSetIndiciesIterators(*args)
    def GetProbeSetIterators(*args): return _AffyFileParser.CMSKFileData_GetProbeSetIterators(*args)
    def Read(*args): return _AffyFileParser.CMSKFileData_Read(*args)
    def Exists(*args): return _AffyFileParser.CMSKFileData_Exists(*args)
    def Clear(*args): return _AffyFileParser.CMSKFileData_Clear(*args)
CMSKFileData_swigregister = _AffyFileParser.CMSKFileData_swigregister
CMSKFileData_swigregister(CMSKFileData)

class CMSKFileWriter(CMSKFileData):
    __swig_setmethods__ = {}
    for _s in [CMSKFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMSKFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CMSKFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMSKFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CMSKFileWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CMSKFileWriter
    __del__ = lambda self : None;
    def SetArrayType(*args): return _AffyFileParser.CMSKFileWriter_SetArrayType(*args)
    def Save(*args): return _AffyFileParser.CMSKFileWriter_Save(*args)
    def AddProbeSetIndicies(*args): return _AffyFileParser.CMSKFileWriter_AddProbeSetIndicies(*args)
    def AddProbeSet(*args): return _AffyFileParser.CMSKFileWriter_AddProbeSet(*args)
CMSKFileWriter_swigregister = _AffyFileParser.CMSKFileWriter_swigregister
CMSKFileWriter_swigregister(CMSKFileWriter)

class CELFileEntryType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CELFileEntryType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CELFileEntryType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Intensity"] = _AffyFileParser.CELFileEntryType_Intensity_set
    __swig_getmethods__["Intensity"] = _AffyFileParser.CELFileEntryType_Intensity_get
    if _newclass:Intensity = _swig_property(_AffyFileParser.CELFileEntryType_Intensity_get, _AffyFileParser.CELFileEntryType_Intensity_set)
    __swig_setmethods__["Stdv"] = _AffyFileParser.CELFileEntryType_Stdv_set
    __swig_getmethods__["Stdv"] = _AffyFileParser.CELFileEntryType_Stdv_get
    if _newclass:Stdv = _swig_property(_AffyFileParser.CELFileEntryType_Stdv_get, _AffyFileParser.CELFileEntryType_Stdv_set)
    __swig_setmethods__["Pixels"] = _AffyFileParser.CELFileEntryType_Pixels_set
    __swig_getmethods__["Pixels"] = _AffyFileParser.CELFileEntryType_Pixels_get
    if _newclass:Pixels = _swig_property(_AffyFileParser.CELFileEntryType_Pixels_get, _AffyFileParser.CELFileEntryType_Pixels_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CELFileEntryType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CELFileEntryType
    __del__ = lambda self : None;
CELFileEntryType_swigregister = _AffyFileParser.CELFileEntryType_swigregister
CELFileEntryType_swigregister(CELFileEntryType)

class CELFileTranscriptomeEntryType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CELFileTranscriptomeEntryType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CELFileTranscriptomeEntryType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Intensity"] = _AffyFileParser.CELFileTranscriptomeEntryType_Intensity_set
    __swig_getmethods__["Intensity"] = _AffyFileParser.CELFileTranscriptomeEntryType_Intensity_get
    if _newclass:Intensity = _swig_property(_AffyFileParser.CELFileTranscriptomeEntryType_Intensity_get, _AffyFileParser.CELFileTranscriptomeEntryType_Intensity_set)
    __swig_setmethods__["Stdv"] = _AffyFileParser.CELFileTranscriptomeEntryType_Stdv_set
    __swig_getmethods__["Stdv"] = _AffyFileParser.CELFileTranscriptomeEntryType_Stdv_get
    if _newclass:Stdv = _swig_property(_AffyFileParser.CELFileTranscriptomeEntryType_Stdv_get, _AffyFileParser.CELFileTranscriptomeEntryType_Stdv_set)
    __swig_setmethods__["Pixels"] = _AffyFileParser.CELFileTranscriptomeEntryType_Pixels_set
    __swig_getmethods__["Pixels"] = _AffyFileParser.CELFileTranscriptomeEntryType_Pixels_get
    if _newclass:Pixels = _swig_property(_AffyFileParser.CELFileTranscriptomeEntryType_Pixels_get, _AffyFileParser.CELFileTranscriptomeEntryType_Pixels_set)
    def __init__(self, *args): 
        this = _AffyFileParser.new_CELFileTranscriptomeEntryType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CELFileTranscriptomeEntryType
    __del__ = lambda self : None;
CELFileTranscriptomeEntryType_swigregister = _AffyFileParser.CELFileTranscriptomeEntryType_swigregister
CELFileTranscriptomeEntryType_swigregister(CELFileTranscriptomeEntryType)

class CCELFileHeaderData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCELFileHeaderData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCELFileHeaderData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCELFileHeaderData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCELFileHeaderData
    __del__ = lambda self : None;
    def Clear(*args): return _AffyFileParser.CCELFileHeaderData_Clear(*args)
    def SetMagic(*args): return _AffyFileParser.CCELFileHeaderData_SetMagic(*args)
    def GetMagic(*args): return _AffyFileParser.CCELFileHeaderData_GetMagic(*args)
    def SetVersion(*args): return _AffyFileParser.CCELFileHeaderData_SetVersion(*args)
    def GetVersion(*args): return _AffyFileParser.CCELFileHeaderData_GetVersion(*args)
    def SetCols(*args): return _AffyFileParser.CCELFileHeaderData_SetCols(*args)
    def GetCols(*args): return _AffyFileParser.CCELFileHeaderData_GetCols(*args)
    def SetRows(*args): return _AffyFileParser.CCELFileHeaderData_SetRows(*args)
    def GetRows(*args): return _AffyFileParser.CCELFileHeaderData_GetRows(*args)
    def SetCells(*args): return _AffyFileParser.CCELFileHeaderData_SetCells(*args)
    def GetCells(*args): return _AffyFileParser.CCELFileHeaderData_GetCells(*args)
    def AppendHeader(*args): return _AffyFileParser.CCELFileHeaderData_AppendHeader(*args)
    def SetHeader(*args): return _AffyFileParser.CCELFileHeaderData_SetHeader(*args)
    def GetHeader(*args): return _AffyFileParser.CCELFileHeaderData_GetHeader(*args)
    def SetAlg(*args): return _AffyFileParser.CCELFileHeaderData_SetAlg(*args)
    def GetAlg(*args): return _AffyFileParser.CCELFileHeaderData_GetAlg(*args)
    def SetParams(*args): return _AffyFileParser.CCELFileHeaderData_SetParams(*args)
    def GetParams(*args): return _AffyFileParser.CCELFileHeaderData_GetParams(*args)
    def ParseChipType(*args): return _AffyFileParser.CCELFileHeaderData_ParseChipType(*args)
    def SetChipType(*args): return _AffyFileParser.CCELFileHeaderData_SetChipType(*args)
    def GetChipType(*args): return _AffyFileParser.CCELFileHeaderData_GetChipType(*args)
    def ParseDatHeader(*args): return _AffyFileParser.CCELFileHeaderData_ParseDatHeader(*args)
    def SetDatHeader(*args): return _AffyFileParser.CCELFileHeaderData_SetDatHeader(*args)
    def GetDatHeader(*args): return _AffyFileParser.CCELFileHeaderData_GetDatHeader(*args)
    def SetMargin(*args): return _AffyFileParser.CCELFileHeaderData_SetMargin(*args)
    def GetMargin(*args): return _AffyFileParser.CCELFileHeaderData_GetMargin(*args)
    def SetOutliers(*args): return _AffyFileParser.CCELFileHeaderData_SetOutliers(*args)
    def GetOutliers(*args): return _AffyFileParser.CCELFileHeaderData_GetOutliers(*args)
    def IncrementOutliers(*args): return _AffyFileParser.CCELFileHeaderData_IncrementOutliers(*args)
    def DecrementOutliers(*args): return _AffyFileParser.CCELFileHeaderData_DecrementOutliers(*args)
    def SetMasked(*args): return _AffyFileParser.CCELFileHeaderData_SetMasked(*args)
    def GetMasked(*args): return _AffyFileParser.CCELFileHeaderData_GetMasked(*args)
    def IncrementMasked(*args): return _AffyFileParser.CCELFileHeaderData_IncrementMasked(*args)
    def DecrementMasked(*args): return _AffyFileParser.CCELFileHeaderData_DecrementMasked(*args)
    def ParseAlgorithmParameters(*args): return _AffyFileParser.CCELFileHeaderData_ParseAlgorithmParameters(*args)
    def AddAlgorithmParameter(*args): return _AffyFileParser.CCELFileHeaderData_AddAlgorithmParameter(*args)
    def SetAlgorithmParameter(*args): return _AffyFileParser.CCELFileHeaderData_SetAlgorithmParameter(*args)
    def GetAlgorithmParameter(*args): return _AffyFileParser.CCELFileHeaderData_GetAlgorithmParameter(*args)
    def GetAlgorithmParameterTag(*args): return _AffyFileParser.CCELFileHeaderData_GetAlgorithmParameterTag(*args)
    def GetNumberAlgorithmParameters(*args): return _AffyFileParser.CCELFileHeaderData_GetNumberAlgorithmParameters(*args)
    def GetAlgorithmParameters(*args): return _AffyFileParser.CCELFileHeaderData_GetAlgorithmParameters(*args)
    def SetGridCorners(*args): return _AffyFileParser.CCELFileHeaderData_SetGridCorners(*args)
    def ParseCorners(*args): return _AffyFileParser.CCELFileHeaderData_ParseCorners(*args)
    def GetGridCorners(*args): return _AffyFileParser.CCELFileHeaderData_GetGridCorners(*args)
CCELFileHeaderData_swigregister = _AffyFileParser.CCELFileHeaderData_swigregister
CCELFileHeaderData_swigregister(CCELFileHeaderData)

class CCELFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCELFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCELFileData, name)
    __repr__ = _swig_repr
    UNKNOWN = _AffyFileParser.CCELFileData_UNKNOWN
    TEXT_CEL = _AffyFileParser.CCELFileData_TEXT_CEL
    XDA_BCEL = _AffyFileParser.CCELFileData_XDA_BCEL
    TRANSCRIPTOME_BCEL = _AffyFileParser.CCELFileData_TRANSCRIPTOME_BCEL
    COMPACT_BCEL = _AffyFileParser.CCELFileData_COMPACT_BCEL
    CEL_ALL = _AffyFileParser.CCELFileData_CEL_ALL
    CEL_DATA = _AffyFileParser.CCELFileData_CEL_DATA
    CEL_OUTLIER = _AffyFileParser.CCELFileData_CEL_OUTLIER
    CEL_MASK = _AffyFileParser.CCELFileData_CEL_MASK
    def __init__(self, *args): 
        this = _AffyFileParser.new_CCELFileData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCELFileData
    __del__ = lambda self : None;
    def SetError(*args): return _AffyFileParser.CCELFileData_SetError(*args)
    def GetError(*args): return _AffyFileParser.CCELFileData_GetError(*args)
    def GetThisPtr(*args): return _AffyFileParser.CCELFileData_GetThisPtr(*args)
    def SetFileName(*args): return _AffyFileParser.CCELFileData_SetFileName(*args)
    def GetFileName(*args): return _AffyFileParser.CCELFileData_GetFileName(*args)
    def GetHeaderKey(*args): return _AffyFileParser.CCELFileData_GetHeaderKey(*args)
    def GetVersion(*args): return _AffyFileParser.CCELFileData_GetVersion(*args)
    def GetCols(*args): return _AffyFileParser.CCELFileData_GetCols(*args)
    def GetRows(*args): return _AffyFileParser.CCELFileData_GetRows(*args)
    def GetNumCells(*args): return _AffyFileParser.CCELFileData_GetNumCells(*args)
    def GetHeaderString(*args): return _AffyFileParser.CCELFileData_GetHeaderString(*args)
    def GetHeader(*args): return _AffyFileParser.CCELFileData_GetHeader(*args)
    def GetAlg(*args): return _AffyFileParser.CCELFileData_GetAlg(*args)
    def GetParams(*args): return _AffyFileParser.CCELFileData_GetParams(*args)
    def GetAlgorithmParameter(*args): return _AffyFileParser.CCELFileData_GetAlgorithmParameter(*args)
    def GetAlgorithmParameterTag(*args): return _AffyFileParser.CCELFileData_GetAlgorithmParameterTag(*args)
    def GetNumberAlgorithmParameters(*args): return _AffyFileParser.CCELFileData_GetNumberAlgorithmParameters(*args)
    def GetAlgorithmParameters(*args): return _AffyFileParser.CCELFileData_GetAlgorithmParameters(*args)
    def GetDatHeader(*args): return _AffyFileParser.CCELFileData_GetDatHeader(*args)
    def GetChipType(*args): return _AffyFileParser.CCELFileData_GetChipType(*args)
    def GetCellMargin(*args): return _AffyFileParser.CCELFileData_GetCellMargin(*args)
    def GetNumOutliers(*args): return _AffyFileParser.CCELFileData_GetNumOutliers(*args)
    def GetNumMasked(*args): return _AffyFileParser.CCELFileData_GetNumMasked(*args)
    def GetGridCorners(*args): return _AffyFileParser.CCELFileData_GetGridCorners(*args)
    def IndexToX(*args): return _AffyFileParser.CCELFileData_IndexToX(*args)
    def IndexToY(*args): return _AffyFileParser.CCELFileData_IndexToY(*args)
    __swig_getmethods__["XYToIndex"] = lambda x: _AffyFileParser.CCELFileData_XYToIndex
    if _newclass:XYToIndex = staticmethod(_AffyFileParser.CCELFileData_XYToIndex)
    def GetEntry(*args): return _AffyFileParser.CCELFileData_GetEntry(*args)
    def GetTranscriptomeEntry(*args): return _AffyFileParser.CCELFileData_GetTranscriptomeEntry(*args)
    def GetIntensity(*args): return _AffyFileParser.CCELFileData_GetIntensity(*args)
    def GetStdv(*args): return _AffyFileParser.CCELFileData_GetStdv(*args)
    def GetPixels(*args): return _AffyFileParser.CCELFileData_GetPixels(*args)
    def IsMasked(*args): return _AffyFileParser.CCELFileData_IsMasked(*args)
    def IsOutlier(*args): return _AffyFileParser.CCELFileData_IsOutlier(*args)
    def Close(*args): return _AffyFileParser.CCELFileData_Close(*args)
    def GetFileSize(*args): return _AffyFileParser.CCELFileData_GetFileSize(*args)
    def Exists(*args): return _AffyFileParser.CCELFileData_Exists(*args)
    def ReadHeader(*args): return _AffyFileParser.CCELFileData_ReadHeader(*args)
    def Read(*args): return _AffyFileParser.CCELFileData_Read(*args)
    def IsXDACompatibleFile(*args): return _AffyFileParser.CCELFileData_IsXDACompatibleFile(*args)
    def IsTranscriptomeBcelFile(*args): return _AffyFileParser.CCELFileData_IsTranscriptomeBcelFile(*args)
    def IsCompactCelFile(*args): return _AffyFileParser.CCELFileData_IsCompactCelFile(*args)
    def IsUnsupportedCompactCelFile(*args): return _AffyFileParser.CCELFileData_IsUnsupportedCompactCelFile(*args)
    def ReadEx(*args): return _AffyFileParser.CCELFileData_ReadEx(*args)
    def GetReadState(*args): return _AffyFileParser.CCELFileData_GetReadState(*args)
    def Clear(*args): return _AffyFileParser.CCELFileData_Clear(*args)
    def GetFileFormat(*args): return _AffyFileParser.CCELFileData_GetFileFormat(*args)
    def SetFileFormat(*args): return _AffyFileParser.CCELFileData_SetFileFormat(*args)
    def SetAlgorithmName(*args): return _AffyFileParser.CCELFileData_SetAlgorithmName(*args)
    def AddAlgorithmParameter(*args): return _AffyFileParser.CCELFileData_AddAlgorithmParameter(*args)
    def SetDimensions(*args): return _AffyFileParser.CCELFileData_SetDimensions(*args)
    def SetChipType(*args): return _AffyFileParser.CCELFileData_SetChipType(*args)
    def SetMargin(*args): return _AffyFileParser.CCELFileData_SetMargin(*args)
    def SetGridCorners(*args): return _AffyFileParser.CCELFileData_SetGridCorners(*args)
    def SetCellEntry(*args): return _AffyFileParser.CCELFileData_SetCellEntry(*args)
    def AllocateEntries(*args): return _AffyFileParser.CCELFileData_AllocateEntries(*args)
    def SetTranscriptomeCellEntry(*args): return _AffyFileParser.CCELFileData_SetTranscriptomeCellEntry(*args)
    def AllocateTranscriptomeEntries(*args): return _AffyFileParser.CCELFileData_AllocateTranscriptomeEntries(*args)
    def SetIntensity(*args): return _AffyFileParser.CCELFileData_SetIntensity(*args)
    def SetStdv(*args): return _AffyFileParser.CCELFileData_SetStdv(*args)
    def SetPixels(*args): return _AffyFileParser.CCELFileData_SetPixels(*args)
    def SetMask(*args): return _AffyFileParser.CCELFileData_SetMask(*args)
    def SetOutlier(*args): return _AffyFileParser.CCELFileData_SetOutlier(*args)
    def Munmap(*args): return _AffyFileParser.CCELFileData_Munmap(*args)
    def EnsureNotMmapped(*args): return _AffyFileParser.CCELFileData_EnsureNotMmapped(*args)
CCELFileData_swigregister = _AffyFileParser.CCELFileData_swigregister
CCELFileData_swigregister(CCELFileData)
CCELFileData_XYToIndex = _AffyFileParser.CCELFileData_XYToIndex



